basePath: /api
definitions:
  division.CreateModel:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  division.DeleteModel:
    properties:
      to:
        default: 1
        description: |-
          Admin only
          ID of the target division that all the deleted division's holes will be moved to
        type: integer
    type: object
  division.ModifyModel:
    properties:
      description:
        type: string
      name:
        type: string
      pinned:
        items:
          type: integer
        type: array
    type: object
  favourite.AddModel:
    properties:
      hole_id:
        type: integer
    type: object
  favourite.DeleteModel:
    properties:
      hole_id:
        type: integer
    type: object
  favourite.ModifyModel:
    properties:
      hole_ids:
        items:
          type: integer
        type: array
    type: object
  floor.CreateModel:
    properties:
      content:
        type: string
      reply_to:
        description: id of the floor to which replied
        minimum: 0
        type: integer
      special_tag:
        description: Admin and Operator only
        maxLength: 16
        type: string
    required:
    - content
    type: object
  floor.CreateOldModel:
    properties:
      content:
        type: string
      hole_id:
        minimum: 1
        type: integer
      reply_to:
        description: id of the floor to which replied
        minimum: 0
        type: integer
      special_tag:
        description: Admin and Operator only
        maxLength: 16
        type: string
    required:
    - content
    type: object
  floor.DeleteModel:
    properties:
      delete_reason:
        maxLength: 32
        type: string
    type: object
  floor.ModifyModel:
    properties:
      content:
        description: Owner or admin, the original content should be moved to  floor_history
        type: string
      fold:
        description: Admin only
        maxLength: 16
        type: string
      like:
        description: All user, deprecated, "add" is like, "cancel" is reset
        enum:
        - add
        - cancel
        type: string
      special_tag:
        description: Admin and Operator only
        maxLength: 16
        type: string
    type: object
  floor.RestoreModel:
    properties:
      restore_reason:
        maxLength: 32
        type: string
    required:
    - restore_reason
    type: object
  hole.CreateModel:
    properties:
      content:
        type: string
      special_tag:
        description: Admin and Operator only
        maxLength: 16
        type: string
      tags:
        description: All users
        items:
          $ref: '#/definitions/tag.CreateModel'
        type: array
    required:
    - content
    type: object
  hole.CreateOldModel:
    properties:
      content:
        type: string
      division_id:
        description: Admin only
        minimum: 1
        type: integer
      special_tag:
        description: Admin and Operator only
        maxLength: 16
        type: string
      tags:
        description: All users
        items:
          $ref: '#/definitions/tag.CreateModel'
        type: array
    required:
    - content
    type: object
  hole.ModifyModel:
    properties:
      division_id:
        description: Admin only
        minimum: 1
        type: integer
      tags:
        description: All users
        items:
          $ref: '#/definitions/tag.CreateModel'
        type: array
    type: object
  models.Division:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      pinned:
        items:
          $ref: '#/definitions/models.Hole'
        type: array
      time_created:
        type: string
      time_updated:
        type: string
    type: object
  models.Floor:
    properties:
      anonyname:
        description: random username, not empty
        type: string
      content:
        description: not empty
        type: string
      deleted:
        description: whether the floor is deleted
        type: boolean
      fold:
        description: fold reason
        type: string
      hole_id:
        type: integer
      id:
        type: integer
      is_me:
        description: whether the user is the author of the floor, dynamically generated
        type: boolean
      like:
        description: like - dislike
        type: integer
      liked:
        description: whether the user has liked or disliked the floor, dynamically
          generated
        type: integer
      mention:
        description: Many to many mentions (in different holes)
        items:
          $ref: '#/definitions/models.Floor'
        type: array
      path:
        description: storey path
        type: string
      special_tag:
        description: Additional info
        type: string
      storey:
        description: The sequence of floors in a hole
        type: integer
      time_created:
        type: string
      time_updated:
        type: string
    type: object
  models.FloorHistory:
    properties:
      content:
        type: string
      floor_id:
        type: integer
      id:
        type: integer
      reason:
        type: string
      time_created:
        type: string
      time_updated:
        type: string
      user_id:
        description: The one who modified the floor
        type: integer
    type: object
  models.Hole:
    properties:
      division_id:
        type: integer
      floors:
        $ref: '#/definitions/models.HoleFloor'
        description: return floors
      hidden:
        type: boolean
      id:
        type: integer
      reply:
        type: integer
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      time_created:
        type: string
      time_updated:
        type: string
      view:
        type: integer
    type: object
  models.HoleFloor:
    properties:
      first_floor:
        $ref: '#/definitions/models.Floor'
      floors:
        items:
          $ref: '#/definitions/models.Floor'
        type: array
      last_floor:
        $ref: '#/definitions/models.Floor'
    type: object
  models.MessageModel:
    properties:
      message:
        type: string
    type: object
  models.Report:
    properties:
      dealt:
        description: the report has been dealt
        type: boolean
      floor:
        $ref: '#/definitions/models.Floor'
      floor_id:
        type: integer
      id:
        type: integer
      reason:
        type: string
      time_created:
        type: string
      time_updated:
        type: string
    type: object
  models.Tag:
    properties:
      id:
        type: integer
      name:
        type: string
      temperature:
        type: integer
      time_created:
        type: string
      time_updated:
        type: string
    type: object
  report.AddModel:
    properties:
      floor_id:
        type: integer
      reason:
        maxLength: 128
        type: string
    required:
    - floor_id
    - reason
    type: object
  report.DeleteModel:
    properties:
      result:
        description: The deal result, send it to reporter
        maxLength: 128
        type: string
    required:
    - result
    type: object
  tag.CreateModel:
    properties:
      name:
        description: Admin only
        type: string
    type: object
  tag.DeleteModel:
    properties:
      to:
        description: |-
          Admin only
          Name of the target tag that all the deleted tag's holes will be connected to
        type: string
    type: object
  tag.ModifyModel:
    properties:
      name:
        description: Admin only
        type: string
      temperature:
        description: Admin only
        type: integer
    type: object
  utils.ErrorDetailElement:
    properties:
      field:
        type: string
      tag:
        type: string
      value:
        type: string
    type: object
  utils.HttpError:
    properties:
      code:
        type: integer
      detail:
        items:
          $ref: '#/definitions/utils.ErrorDetailElement'
        type: array
      message:
        type: string
    type: object
info:
  contact:
    email: hasbai@fduhole.com
    name: Maintainer Shi Yue
  description: 'An Anonymous BBS \n Note: PUT methods are used to PARTLY update, and
    we don''t use PATCH method.'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Open Tree Hole
  version: 2.0.0
paths:
  /:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageModel'
  /divisions:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Division'
            type: array
      summary: List All Divisions
      tags:
      - Division
    post:
      consumes:
      - application/json
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/division.CreateModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Division'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Division'
      summary: Add A Division
      tags:
      - Division
  /divisions/{division_id}/holes:
    get:
      parameters:
      - description: division_id
        in: path
        name: division_id
        required: true
        type: integer
      - description: updated time < offset (default is now)
        in: query
        name: offset
        type: string
      - default: 10
        in: query
        maximum: 10
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Hole'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: List Holes In A Division
      tags:
      - Hole
    post:
      description: Create a hole, create tags and floor binding to it and set the
        name mapping
      parameters:
      - description: division id
        in: path
        name: division_id
        required: true
        type: integer
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/hole.CreateModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Hole'
      summary: Create A Hole
      tags:
      - Hole
  /divisions/{id}:
    delete:
      description: Delete a division and move all of its holes to another given division
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/division.DeleteModel'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Delete A Division
      tags:
      - Division
    get:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Division'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Get Division
      tags:
      - Division
    put:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/division.ModifyModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Division'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Modify A Division
      tags:
      - Division
  /floors:
    get:
      deprecated: true
      parameters:
      - in: query
        name: holeID
        type: integer
      - in: query
        name: offset
        type: integer
      - default: 10
        in: query
        maximum: 30
        minimum: 0
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Floor'
            type: array
      summary: Old API for Listing Floors
      tags:
      - Floor
    post:
      deprecated: true
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/floor.CreateOldModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Floor'
      summary: Old API for Creating A Floor
      tags:
      - Floor
  /floors/{id}:
    delete:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/floor.DeleteModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Floor'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Delete A Floor
      tags:
      - Floor
    get:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Floor'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Get A Floor
      tags:
      - Floor
    put:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/floor.ModifyModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Floor'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Modify A Floor
      tags:
      - Floor
  /floors/{id}/history:
    get:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FloorHistory'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Get A Floor's History
      tags:
      - Floor
  /floors/{id}/like/{like}:
    post:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: 1 is like, 0 is reset, -1 is dislike
        in: path
        name: like
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Floor'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Modify A Floor's like
      tags:
      - Floor
  /floors/{id}/restore/{floor_history_id}:
    post:
      description: Restore A Floor From A History Vertion
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: floor_history_id
        in: path
        name: floor_history_id
        required: true
        type: integer
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/floor.RestoreModel'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Floor'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Restore A Floor
      tags:
      - Floor
  /holes:
    get:
      deprecated: true
      parameters:
      - in: query
        name: division_id
        type: integer
      - default: 10
        in: query
        maximum: 10
        name: length
        type: integer
      - in: query
        name: start_time
        type: string
      - in: query
        name: tag
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Hole'
            type: array
      summary: Old API for Listing Holes
      tags:
      - Hole
    post:
      deprecated: true
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/hole.CreateOldModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Hole'
      summary: Old API for Creating A Hole
      tags:
      - Hole
  /holes/{hole_id}/floors:
    get:
      parameters:
      - description: hole id
        in: path
        name: hole_id
        required: true
        type: integer
      - default: 0
        description: offset of object array
        in: query
        minimum: 0
        name: offset
        type: integer
      - default: storey
        description: SQL ORDER BY field
        enum:
        - storey
        - id
        - like
        in: query
        name: orderBy
        type: string
      - default: 10
        description: length of object array
        in: query
        maximum: 30
        minimum: 0
        name: size
        type: integer
      - default: asc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Floor'
            type: array
      summary: List Floors In A Hole
      tags:
      - Floor
    post:
      parameters:
      - description: hole id
        in: path
        name: hole_id
        required: true
        type: integer
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/floor.CreateModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Floor'
      summary: Create A Floor
      tags:
      - Floor
  /holes/{id}:
    delete:
      description: Hide a hole, but visible to admins. This may affect many floors,
        DO NOT ABUSE!!!
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Delete A Hole
      tags:
      - Hole
    get:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Hole'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Get A Hole
      tags:
      - Hole
    patch:
      description: Add hole.view
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Patch A Hole
      tags:
      - Hole
    put:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/hole.ModifyModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Hole'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Modify A Hole
      tags:
      - Hole
  /reports:
    get:
      parameters:
      - default: 0
        description: offset of object array
        in: query
        minimum: 0
        name: offset
        type: integer
      - default: id
        description: SQL ORDER BY field
        in: query
        name: orderBy
        type: string
      - in: query
        name: range
        type: integer
      - default: 10
        description: length of object array
        in: query
        maximum: 30
        minimum: 0
        name: size
        type: integer
      - default: asc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Report'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: List All Reports
      tags:
      - Report
    post:
      description: Add a report and send notification to admins
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/report.AddModel'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: Add a report
      tags:
      - Report
  /reports/{id}:
    delete:
      description: Mark a report as "dealt" and send notification to reporter
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/report.DeleteModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Report'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: Deal a report
      tags:
      - Report
    get:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Report'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Get A Report
      tags:
      - Report
  /tags:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tag'
            type: array
      summary: List All Tags
      tags:
      - Tag
    post:
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/tag.CreateModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tag'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Tag'
      summary: Create A Tag
      tags:
      - Tag
  /tags/{id}:
    delete:
      description: Delete a tag and link all of its holes to another given tag
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/tag.DeleteModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tag'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Delete A Tag
      tags:
      - Tag
    get:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tag'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Get A Tag
      tags:
      - Tag
    put:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/tag.ModifyModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tag'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Modify A Tag
      tags:
      - Tag
  /tags/{tag_name}/holes:
    get:
      parameters:
      - description: tag_name
        in: path
        name: tag_name
        required: true
        type: string
      - description: updated time < offset (default is now)
        in: query
        name: offset
        type: string
      - default: 10
        in: query
        maximum: 10
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Hole'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: List Holes By Tag
      tags:
      - Hole
  /user/favorites:
    delete:
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/favourite.DeleteModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Delete A Favorite
      tags:
      - Favorite
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Hole'
            type: array
      summary: List User's Favorites
      tags:
      - Favorite
    post:
      consumes:
      - application/json
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/favourite.AddModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageModel'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Add A Favorite
      tags:
      - Favorite
    put:
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/favourite.ModifyModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageModel'
      summary: Modify User's Favorites
      tags:
      - Favorite
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
