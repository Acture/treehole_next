package models

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"
	"treehole_next/config"
	"treehole_next/utils"
)

const (
	timeout = time.Second * 10
)

var client = http.Client{Timeout: timeout}

/*
	{
		"data": { // database model, struct, only need once Marshal at the end
		"additionalProp1": "string",
		"additionalProp2": "string",
		"additionalProp3": "string"
		},
		"description": "string", // DON'T ADD, will be generated by microservice
		"recipients": [ // UserIds, []int, only need once Marshal at the end
		0
		],
		"title": "string", // DON'T ADD, will be generated by microservice
		"type": "favorite", // define by MessageType, string
		"url": "string" // relative api route, string
	}
*/
type Message map[string]any

type MessageType string

const (
	MessageTypeFavorite    MessageType = "favorite"
	MessageTypeReply       MessageType = "reply"
	MessageTypeMention     MessageType = "mention"
	MessageTypeModify      MessageType = "modify" // including fold and delete
	MessageTypePermission  MessageType = "permission"
	MessageTypeReport      MessageType = "report"
	MessageTypeReportDealt MessageType = "report_dealt"
)

func readRespMessage(body io.ReadCloser) Message {
	defer func(body io.ReadCloser) {
		err := body.Close()
		if err != nil {
			utils.Logger.Error("[notification] Close error: " + err.Error())
		}
	}(body)

	data, err := ioutil.ReadAll(body)
	if err != nil {
		utils.Logger.Error("[notification] Read body failed: " + err.Error())
		return Message{}
	}
	var response Message
	err = json.Unmarshal(data, &response)
	if err != nil {
		utils.Logger.Error("[notification] Unmarshal body failed: " + err.Error())
		return Message{}
	}
	return response
}

func (message Message) Send() error {
	// only for test
	// message["recipients"] = []int{1}

	// construct form
	form, err := json.Marshal(message)
	if err != nil {
		utils.Logger.Error("[notification] error encoding notification" + err.Error())
		return err
	}

	// construct http request
	req, _ := http.NewRequest(
		"POST",
		config.Config.MicroUrl,
		bytes.NewBuffer(form),
	)
	req.Header.Add("Content-Type", "application/json")

	// get response
	resp, err := client.Do(req)
	response := readRespMessage(resp.Body)

	// handle err
	if err != nil {
		utils.Logger.Error("[notification] error sending notification" + err.Error())
		return err
	} else if resp.StatusCode != 201 {
		utils.Logger.Error("[notification] microservice response failed" + fmt.Sprint(response))
		return errors.New(fmt.Sprint(response))
	}

	return nil
}

type Admin struct {
	Id           int    `json:"id"`
	IsAdmin      bool   `json:"is_admin"`
	JoinedTime   string `json:"joined_time"`
	LastLogin    string `json:"last_login"`
	Nickname     string `json:"nickname"`
	OffenseCount int    `json:"offense_count"`
	Roles        string `json:"roles"`
}

func readRespAdmin(body io.ReadCloser) []Admin {
	defer func(body io.ReadCloser) {
		err := body.Close()
		if err != nil {
			utils.Logger.Error("[notification] Close error: " + err.Error())
		}
	}(body)

	data, err := ioutil.ReadAll(body)
	if err != nil {
		utils.Logger.Error("[notification] Read body failed: " + err.Error())
		return []Admin{}
	}
	var response []Admin
	err = json.Unmarshal(data, &response)
	if err != nil {
		utils.Logger.Error("[notification] Unmarshal body failed: " + err.Error())
		return []Admin{}
	}
	return response
}

func GetAdmin() ([]int, error) {
	// construct form
	data := map[string]string{
		"size":   "0",
		"offset": "0",
		"role":   "admin",
	}
	form := url.Values{}
	for k, v := range data {
		form.Add(k, v)
	}

	// construct http request
	req, _ := http.NewRequest(
		"GET",
		config.Config.AuthUrl,
		strings.NewReader(form.Encode()),
	)
	req.Header.Add("Content-Type", "application/x-www-form-urlencoded")

	// get response
	resp, err := client.Do(req)
	response := readRespAdmin(resp.Body)

	// handle err
	if err != nil {
		utils.Logger.Error("[getadmin] error sending notification" + err.Error())
		return nil, err
	} else if resp.StatusCode != 200 {
		utils.Logger.Error("[getadmin] microservice response failed" + fmt.Sprint(response))
		return nil, errors.New(fmt.Sprint(response))
	}

	// get ids
	var admin []int
	for _, mention := range response {
		admin = append(admin, mention.Id)
	}

	return admin, nil
}
